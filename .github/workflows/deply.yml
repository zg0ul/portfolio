name: Deploy to Production

on:
  push:
    branches: [deploy]
  workflow_dispatch: # Allows manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest 
            type=sha,prefix={{branch}}-
            type=ref,event=branch,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          no-cache: true

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Stop and remove existing container if it exists
            docker stop portfolio || true
            docker rm portfolio || true

            # Run the new container with ALL environment variables
            docker run -d \
              --name portfolio \
              --restart unless-stopped \
              --dns=8.8.8.8 \
              --dns=1.1.1.1 \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e NODE_OPTIONS="--tls-min-v1.2" \
              -e NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
              -e NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
              -e SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
              -e RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}" \
              -e EMAIL_FROM_DOMAIN="${{ secrets.EMAIL_FROM_DOMAIN }}" \
              -e EMAIL_TO="${{ secrets.EMAIL_TO }}" \
              -e ADMIN_SECRET_KEY="${{ secrets.ADMIN_SECRET_KEY }}" \
              -e ADMIN_PATH="${{ secrets.ADMIN_PATH }}" \
              -e NEXT_PUBLIC_DASHBOARD_SECRET="${{ secrets.NEXT_PUBLIC_DASHBOARD_SECRET }}" \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Health Check & Nginx Reload
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Wait for container to be ready
            sleep 10

            # Check if container is running
            if docker ps --filter name=portfolio --format "{{.Names}}" | grep -q portfolio; then
              echo "‚úÖ Container is running successfully"
              
              # Test if the application responds locally
              if curl -f http://localhost:3000 >/dev/null 2>&1; then
                echo "‚úÖ Application is responding on port 3000"
                
                # Test Nginx configuration and reload if needed
                nginx -t && nginx -s reload
                echo "‚úÖ Nginx configuration reloaded"
                
                # Test the public domain
                sleep 5
                if curl -f -k https://zg0ul.com >/dev/null 2>&1; then
                  echo "‚úÖ Site is accessible via https://zg0ul.com"
                else
                  echo "‚ö†Ô∏è  Site might not be accessible via domain yet (DNS/SSL issue)"
                  echo "This is normal for new deployments - check manually"
                fi
                
              else
                echo "‚ùå Application is not responding on port 3000"
                docker logs portfolio --tail 50
                exit 1
              fi
            else
              echo "‚ùå Container failed to start"
              docker logs portfolio --tail 50
              exit 1
            fi

      - name: Test API Keys and Environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            echo "=== Checking Environment Variables ==="
            docker exec portfolio env | grep -E "(SUPABASE|RESEND|ADMIN)" | sed 's/=.*/=***/' || echo "No matching env vars found"
            
            echo "=== Testing Supabase Connection ==="
            docker exec portfolio curl -s https://pmerpfdlvkhayhritnhy.supabase.co/rest/v1/ \
              -H "apikey: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
              -H "Authorization: Bearer ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"
            
            echo "=== Testing /api/projects endpoint ==="
            curl -s http://localhost:3000/api/projects | head -c 500
            
            echo "=== Container logs (last 20 lines) ==="
            docker logs portfolio --tail 20

  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          echo "Your portfolio is now live at your VPS!"

      - name: Notify Failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details."